// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

use std::fmt::Display;

use crate::{
    additional_cpp_generator::AdditionalNeed,
    byvalue_checker::ByValueChecker,
    foreign_mod_converter::{ForeignModConversionCallbacks, ForeignModConverter},
    namespace_organizer::{NamespaceEntries, Use},
    type_converter::TypeConverter,
    typedef_analyzer::analyze_typedef_target,
    typedef_analyzer::TypedefTarget,
    types::make_ident,
    types::Namespace,
    types::TypeName,
};
use proc_macro2::{TokenStream as TokenStream2, TokenTree};
use quote::quote;
use syn::{
    parse::Parser, parse_quote, Field, ForeignItem, GenericParam, Generics, Ident, Item,
    ItemForeignMod, ItemMod, ItemStruct, Type,
};

#[derive(Debug)]
pub enum ConvertError {
    NoContent,
    UnsafePODType(String),
    UnexpectedForeignItem,
    UnexpectedOuterItem,
    UnexpectedItemInMod,
    ComplexTypedefTarget(String),
    UnexpectedThisType,
}

impl Display for ConvertError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            ConvertError::NoContent => write!(f, "The initial run of 'bindgen' did not generate any content. This might be because none of the requested items for generation could be converted.")?,
            ConvertError::UnsafePODType(err) => write!(f, "An item was requested using 'generate_pod' which was not safe to hold by value in Rust. {}", err)?,
            ConvertError::UnexpectedForeignItem => write!(f, "Bindgen generated some unexpected code in a foreign mod section. You may have specified something in a 'generate' directive which is not currently compatible with autocxx.")?,
            ConvertError::UnexpectedOuterItem => write!(f, "Bindgen generated some unexpected code in its outermost mod section. You may have specified something in a 'generate' directive which is not currently compatible with autocxx.")?,
            ConvertError::UnexpectedItemInMod => write!(f, "Bindgen generated some unexpected code in an inner namespace mod. You may have specified something in a 'generate' directive which is not currently compatible with autocxx.")?,
            ConvertError::ComplexTypedefTarget(ty) => write!(f, "autocxx was unable to produce a typdef pointing to the complex type {}.", ty)?,
            ConvertError::UnexpectedThisType => write!(f, "Unexpected type for 'this'")?, // TODO give type/function
        }
        Ok(())
    }
}

/// Results of a conversion.
pub(crate) struct BridgeConversionResults {
    pub items: Vec<Item>,
    pub additional_cpp_needs: Vec<AdditionalNeed>,
}

/// Converts the bindings generated by bindgen into a form suitable
/// for use with `cxx`.
///
/// Non-exhaustive list of things we do:
/// * Replaces certain identifiers e.g. `std::unique_ptr` with `UniquePtr`
/// * Replaces pointers with references
/// * Removes repr attributes
/// * Removes link_name attributes
/// * Adds include! directives
/// * Adds #[cxx::bridge]
/// In fact, most of the actual operation happens within an
/// individual `BridgeConevrsion`.
/// This mod has grown to be rather unwieldy. It started with much
/// smaller ambitions and is now really the core of `autocxx`. It'll
/// need to be split down into smaller crates at some point. TODO.
///
/// # Flexibility in handling bindgen output
///
/// autocxx is inevitably tied to the details of the bindgen output;
/// e.g. the creation of a 'root' mod when namespaces are enabled.
/// At the moment this crate takes the view that it's OK to panic
/// if the bindgen output is not as expected. It may be in future that
/// we need to be a bit more graceful, but for now, that's OK.
pub(crate) struct BridgeConverter {
    include_list: Vec<String>,
    pod_requests: Vec<TypeName>,
}

impl BridgeConverter {
    pub fn new(include_list: Vec<String>, pod_requests: Vec<TypeName>) -> Self {
        Self {
            include_list,
            pod_requests,
        }
    }

    /// Convert a TokenStream of bindgen-generated bindings to a form
    /// suitable for cxx.
    pub(crate) fn convert(
        &mut self,
        bindings: ItemMod,
        exclude_utilities: bool,
    ) -> Result<BridgeConversionResults, ConvertError> {
        match bindings.content {
            None => Err(ConvertError::NoContent),
            Some((brace, items)) => {
                let bindgen_mod = ItemMod {
                    attrs: bindings.attrs,
                    vis: bindings.vis,
                    ident: bindings.ident,
                    mod_token: bindings.mod_token,
                    content: Some((brace, Vec::new())),
                    semi: bindings.semi,
                };
                let conversion = BridgeConversion {
                    bindgen_mod,
                    all_items: Vec::new(),
                    bridge_items: Vec::new(),
                    extern_c_mod: None,
                    extern_c_mod_items: Vec::new(),
                    additional_cpp_needs: Vec::new(),
                    idents_found: Vec::new(),
                    type_converter: TypeConverter::new(),
                    byvalue_checker: ByValueChecker::new(),
                    pod_requests: &self.pod_requests,
                    include_list: &self.include_list,
                    final_uses: Vec::new(),
                };
                conversion.convert_items(items, exclude_utilities)
            }
        }
    }
}

fn get_blank_extern_c_mod() -> ItemForeignMod {
    parse_quote!(
        extern "C" {}
    )
}

/// A particular bridge conversion operation. This can really
/// be thought of as a ton of parameters which we'd otherwise
/// need to pass into each individual function within this file.
struct BridgeConversion<'a> {
    bindgen_mod: ItemMod,
    all_items: Vec<Item>,
    bridge_items: Vec<Item>,
    extern_c_mod: Option<ItemForeignMod>,
    extern_c_mod_items: Vec<ForeignItem>,
    additional_cpp_needs: Vec<AdditionalNeed>,
    idents_found: Vec<Ident>,
    type_converter: TypeConverter,
    byvalue_checker: ByValueChecker,
    pod_requests: &'a Vec<TypeName>,
    include_list: &'a Vec<String>,
    final_uses: Vec<Use>,
}

impl<'a> BridgeConversion<'a> {
    /// Main function which goes through and performs conversion from
    /// `bindgen`-style Rust output into `cxx::bridge`-style Rust input.
    /// At present, it significantly rewrites the bindgen mod,
    /// as well as generating an additional cxx::bridge mod, and an outer
    /// mod with all sorts of 'use' statements. A valid alternative plan
    /// might be to keep the bindgen mod untouched and _only_ generate
    /// additional bindings, but the sticking point there is that it's not
    /// obviously possible to stop folks allocating opaque types in the
    /// bindgen mod. (We mark all types as opaque until we're told
    /// otherwise, which is the opposite of what bindgen does, so we can't
    /// just give it lots of directives to make all types opaque.)
    /// One future option could be to provide a mode to bindgen where
    /// everything is opaque unless specifically allowlisted to be
    /// transparent.
    fn convert_items(
        mut self,
        items: Vec<Item>,
        exclude_utilities: bool,
    ) -> Result<BridgeConversionResults, ConvertError> {
        if !exclude_utilities {
            self.generate_utilities();
        }
        let mut bindgen_root_items = Vec::new();
        for item in items {
            match item {
                Item::Mod(root_mod) => {
                    // With namespaces enabled, bindgen always puts everything
                    // in a mod called 'root'. We don't want to pass that
                    // onto cxx, so jump right into it.
                    assert!(root_mod.ident == "root");
                    if let Some((_, items)) = root_mod.content {
                        let root_ns = Namespace::new();
                        self.find_nested_pod_types(&items, &root_ns)?;
                        self.convert_mod_items(items, root_ns, &mut bindgen_root_items)?;
                    }
                }
                _ => return Err(ConvertError::UnexpectedOuterItem),
            }
        }
        self.extern_c_mod_items
            .extend(self.build_include_foreign_items());
        // We will always create an extern "C" mod even if bindgen
        // didn't generate one, e.g. because it only generated types.
        // We still want cxx to know about those types.
        let mut extern_c_mod = self
            .extern_c_mod
            .take()
            .unwrap_or_else(get_blank_extern_c_mod);
        extern_c_mod.items.append(&mut self.extern_c_mod_items);
        self.bridge_items.push(Item::ForeignMod(extern_c_mod));
        // The extensive use of parse_quote here could end up
        // being a performance bottleneck. If so, we might want
        // to set the 'contents' field of the ItemMod
        // structures directly.
        self.bindgen_mod.content.as_mut().unwrap().1 = vec![Item::Mod(parse_quote! {
            pub mod root {
                #(#bindgen_root_items)*
            }
        })];
        self.generate_final_use_statements();
        self.all_items.push(Item::Mod(self.bindgen_mod));
        let bridge_items = &self.bridge_items;
        self.all_items.push(Item::Mod(parse_quote! {
            #[cxx::bridge]
            pub mod cxxbridge {
                #(#bridge_items)*
            }
        }));
        Ok(BridgeConversionResults {
            items: self.all_items,
            additional_cpp_needs: self.additional_cpp_needs,
        })
    }

    fn convert_mod_items(
        &mut self,
        items: Vec<Item>,
        ns: Namespace,
        output_items: &mut Vec<Item>,
    ) -> Result<(), ConvertError> {
        // This object maintains some state specific to this namespace, i.e.
        // this particular mod.
        let mut mod_converter = ForeignModConverter::new(ns.clone());
        for item in items {
            match item {
                Item::ForeignMod(mut fm) => {
                    let items = fm.items;
                    fm.items = Vec::new();
                    if self.extern_c_mod.is_none() {
                        self.extern_c_mod = Some(fm);
                        // We'll use the first 'extern "C"' mod we come
                        // across for attributes, spans etc. but we'll stuff
                        // the contents of all bindgen 'extern "C"' mods into this
                        // one.
                    }
                    mod_converter.convert_foreign_mod_items(items, self)?;
                }
                Item::Struct(mut s) => {
                    let tyname = TypeName::new(&ns, &s.ident.to_string());
                    let should_be_pod = self.byvalue_checker.is_pod(&tyname);
                    if !Self::generics_contentful(&s.generics) {
                        // cxx::bridge can't cope with type aliases to generic
                        // types at the moment.
                        self.generate_type_alias(tyname, should_be_pod)?;
                    }
                    if !should_be_pod {
                        Self::make_non_pod(&mut s);
                    }
                    output_items.push(Item::Struct(s));
                }
                Item::Enum(e) => {
                    let tyname = TypeName::new(&ns, &e.ident.to_string());
                    self.generate_type_alias(tyname, true)?;
                    output_items.push(Item::Enum(e));
                }
                Item::Impl(_) => {
                    // We ignore all impl blocks generated by bindgen.
                    // Methods also appear in 'extern "C"' blocks which
                    // we will convert instead. At that time we'll also construct
                    // synthetic impl blocks.
                }
                Item::Mod(itm) => {
                    let mut new_itm = itm.clone();
                    if let Some((_, items)) = itm.content {
                        let new_ns = ns.push(itm.ident.to_string());
                        let mut new_items = Vec::new();
                        self.convert_mod_items(items, new_ns, &mut new_items)?;
                        new_itm.content.as_mut().unwrap().1 = new_items;
                    }
                    output_items.push(Item::Mod(new_itm));
                }
                Item::Use(_) => {
                    output_items.push(item);
                }
                Item::Const(_) => {
                    self.all_items.push(item);
                }
                Item::Type(ity) => {
                    if Self::generics_contentful(&ity.generics) {
                        // Ignore this for now. Sometimes bindgen generates such things
                        // without an actual need to do so.
                        continue;
                    }
                    let tyname = TypeName::new(&ns, &ity.ident.to_string());
                    self.type_converter.insert_typedef(tyname, ity.ty.as_ref());
                    output_items.push(Item::Type(ity));
                }
                _ => return Err(ConvertError::UnexpectedItemInMod),
            }
        }
        output_items.extend(mod_converter.get_impl_blocks().map(|(_, v)| Item::Impl(v)));
        let supers = std::iter::repeat(make_ident("super")).take(ns.depth() + 2);
        output_items.push(Item::Use(parse_quote! {
            #[allow(unused_imports)]
            use self::
                #(#supers)::*
            ::cxxbridge;
        }));
        for thing in &["UniquePtr", "CxxString"] {
            let thing = make_ident(thing);
            output_items.push(Item::Use(parse_quote! {
                #[allow(unused_imports)]
                use cxx:: #thing;
            }));
        }
        Ok(())
    }

    fn make_non_pod(s: &mut ItemStruct) {
        // Thanks to dtolnay@ for this explanation of why the following
        // is needed:
        // If the real alignment of the C++ type is smaller and a reference
        // is returned from C++ to Rust, mere existence of an insufficiently
        // aligned reference in Rust causes UB even if never dereferenced
        // by Rust code
        // (see https://doc.rust-lang.org/1.47.0/reference/behavior-considered-undefined.html).
        // Rustc can use least-significant bits of the reference for other storage.
        s.attrs = vec![parse_quote!(
            #[repr(C, packed)]
        )];
        // Now fill in fields. Usually, we just want a single field
        // but if this is a generic type we need to faff a bit.
        let generic_type_fields =
            s.generics
                .params
                .iter()
                .enumerate()
                .filter_map(|(counter, gp)| match gp {
                    GenericParam::Type(gpt) => {
                        let id = &gpt.ident;
                        let field_name = make_ident(&format!("_phantom_{}", counter));
                        let toks = quote! {
                            #field_name: ::std::marker::PhantomData<::std::cell::UnsafeCell< #id >>
                        };
                        let parser = Field::parse_named;
                        Some(parser.parse2(toks).unwrap())
                    }
                    _ => None,
                });
        // See cxx's opaque::Opaque for rationale for this type... in
        // short, it's to avoid being Send/Sync.
        s.fields = syn::Fields::Named(parse_quote! {
            {
                do_not_attempt_to_allocate_nonpod_types: [*const u8; 0],
                #(#generic_type_fields),*
            }
        });
    }

    fn generics_contentful(generics: &Generics) -> bool {
        generics.lifetimes().next().is_some()
            || generics.const_params().next().is_some()
            || generics.type_params().next().is_some()
    }

    fn find_nested_pod_types_in_mod(
        &mut self,
        items: &[Item],
        ns: &Namespace,
    ) -> Result<(), ConvertError> {
        for item in items {
            match item {
                Item::Struct(s) => self.byvalue_checker.ingest_struct(s, ns),
                Item::Enum(e) => self
                    .byvalue_checker
                    .ingest_pod_type(TypeName::new(&ns, &e.ident.to_string())),
                Item::Type(ity) => {
                    if Self::generics_contentful(&ity.generics) {
                        // Ignore this for now. Sometimes bindgen generates such things
                        // without an actual need to do so.
                        continue;
                    }
                    let typedef_type = analyze_typedef_target(ity.ty.as_ref());
                    let name = TypeName::new(ns, &ity.ident.to_string());
                    match typedef_type {
                        TypedefTarget::NoArguments(tn) => {
                            self.byvalue_checker.ingest_simple_typedef(name, tn)
                        }
                        TypedefTarget::HasArguments | TypedefTarget::SomethingComplex => {
                            self.byvalue_checker.ingest_nonpod_type(name)
                        }
                    }
                }
                Item::Mod(itm) => {
                    if let Some((_, nested_items)) = &itm.content {
                        let new_ns = ns.push(itm.ident.to_string());
                        self.find_nested_pod_types_in_mod(nested_items, &new_ns)?;
                    }
                }
                _ => {}
            }
        }
        Ok(())
    }

    fn find_nested_pod_types(
        &mut self,
        items: &[Item],
        ns: &Namespace,
    ) -> Result<(), ConvertError> {
        self.find_nested_pod_types_in_mod(items, ns)?;
        self.byvalue_checker
            .satisfy_requests(self.pod_requests.clone())
            .map_err(ConvertError::UnsafePODType)
    }

    fn generate_type_alias(
        &mut self,
        tyname: TypeName,
        should_be_pod: bool,
    ) -> Result<(), ConvertError> {
        let final_ident = make_ident(tyname.get_final_ident());
        let kind_item = make_ident(if should_be_pod { "Trivial" } else { "Opaque" });
        let tynamestring = tyname.to_cpp_name();
        let mut for_extern_c_ts = if tyname.has_namespace() {
            let ns_string = tyname
                .ns_segment_iter()
                .cloned()
                .collect::<Vec<String>>()
                .join("::");
            quote! {
                #[namespace = #ns_string]
            }
        } else {
            TokenStream2::new()
        };

        let mut fulltypath = Vec::new();
        // We can't use parse_quote! here because it doesn't support type aliases
        // at the moment.
        let colon = TokenTree::Punct(proc_macro2::Punct::new(':', proc_macro2::Spacing::Joint));
        for_extern_c_ts.extend(
            [
                TokenTree::Ident(make_ident("type")),
                TokenTree::Ident(final_ident.clone()),
                TokenTree::Punct(proc_macro2::Punct::new('=', proc_macro2::Spacing::Alone)),
                TokenTree::Ident(make_ident("super")),
                colon.clone(),
                colon.clone(),
                TokenTree::Ident(make_ident("bindgen")),
                colon.clone(),
                colon.clone(),
                TokenTree::Ident(make_ident("root")),
                colon.clone(),
                colon.clone(),
            ]
            .to_vec(),
        );
        fulltypath.push(make_ident("bindgen"));
        fulltypath.push(make_ident("root"));
        for segment in tyname.ns_segment_iter() {
            let id = make_ident(segment);
            for_extern_c_ts
                .extend([TokenTree::Ident(id.clone()), colon.clone(), colon.clone()].to_vec());
            fulltypath.push(id);
        }
        for_extern_c_ts.extend(
            [
                TokenTree::Ident(final_ident.clone()),
                TokenTree::Punct(proc_macro2::Punct::new(';', proc_macro2::Spacing::Alone)),
            ]
            .to_vec(),
        );
        fulltypath.push(final_ident.clone());
        self.extern_c_mod_items
            .push(ForeignItem::Verbatim(for_extern_c_ts));
        self.bridge_items.push(Item::Impl(parse_quote! {
            impl UniquePtr<#final_ident> {}
        }));
        self.all_items.push(Item::Impl(parse_quote! {
            unsafe impl cxx::ExternType for #(#fulltypath)::* {
                type Id = cxx::type_id!(#tynamestring);
                type Kind = cxx::kind::#kind_item;
            }
        }));
        self.add_use(tyname.get_namespace(), &final_ident);
        self.type_converter.push(tyname);
        self.idents_found.push(final_ident);
        Ok(())
    }

    fn build_include_foreign_items(&self) -> Vec<ForeignItem> {
        let extra_inclusion = if self.additional_cpp_needs.is_empty() {
            None
        } else {
            Some("autocxxgen.h".to_string())
        };
        let chained = self.include_list.iter().chain(extra_inclusion.iter());
        chained
            .map(|inc| {
                ForeignItem::Macro(parse_quote! {
                    include!(#inc);
                })
            })
            .collect()
    }

    fn add_use(&mut self, ns: &Namespace, id: &Ident) {
        self.final_uses.push(Use {
            ns: ns.clone(),
            id: id.clone(),
        });
    }

    /// Adds items which we always add, cos they're useful.
    fn generate_utilities(&mut self) {
        // Unless we've been specifically asked not to do so, we always
        // generate a 'make_string' function. That pretty much *always* means
        // we run two passes through bindgen. i.e. the next 'if' is always true,
        // and we always generate an additional C++ file for our bindings additions,
        // unless the include_cpp macro has specified ExcludeUtilities.
        self.extern_c_mod_items.push(ForeignItem::Fn(parse_quote!(
            fn make_string(str_: &str) -> UniquePtr<CxxString>;
        )));
        self.add_use(&Namespace::new(), &make_ident("make_string"));
        self.additional_cpp_needs
            .push(AdditionalNeed::MakeStringConstructor);
    }

    /// Generate lots of 'use' statements to pull cxxbridge items into the output
    /// mod hierarchy according to C++ namespaces.
    fn generate_final_use_statements(&mut self) {
        let ns_entries = NamespaceEntries::new(&self.final_uses);
        Self::append_child_namespace(&ns_entries, &mut self.all_items);
    }

    fn append_child_namespace(ns_entries: &NamespaceEntries, output_items: &mut Vec<Item>) {
        for item in ns_entries.entries() {
            let id = &item.id;
            output_items.push(Item::Use(parse_quote!(
                pub use cxxbridge :: #id;
            )));
        }
        for (child_name, child_ns_entries) in ns_entries.children() {
            let child_id = make_ident(child_name);
            let mut new_mod: ItemMod = parse_quote!(
                pub mod #child_id {
                    use super::cxxbridge;
                }
            );
            Self::append_child_namespace(
                child_ns_entries,
                &mut new_mod.content.as_mut().unwrap().1,
            );
            output_items.push(Item::Mod(new_mod));
        }
    }
}

impl<'a> ForeignModConversionCallbacks for BridgeConversion<'a> {
    fn add_additional_cpp_need(&mut self, need: AdditionalNeed) {
        self.additional_cpp_needs.push(need);
    }

    fn convert_boxed_type(&self, ty: Box<Type>, ns: &Namespace) -> Result<Box<Type>, ConvertError> {
        self.type_converter.convert_boxed_type(ty, ns)
    }

    fn is_pod(&self, ty: &TypeName) -> bool {
        self.byvalue_checker.is_pod(ty)
    }

    fn add_use(&mut self, ns: &Namespace, id: &Ident) {
        self.add_use(ns, id);
    }

    fn push_extern_c_mod_item(&mut self, item: ForeignItem) {
        self.extern_c_mod_items.push(item);
    }
}
