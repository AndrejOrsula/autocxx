name: CI

on:
  pull_request:
  push:
  schedule: [cron: "40 1 * * *"]
  workflow_dispatch:

jobs:
  test:
    name: ${{matrix.name || format('Rust {0}', matrix.rust)}}
    runs-on: ${{matrix.os || 'ubuntu'}}-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - rust: nightly
          - rust: beta
          - rust: stable
          - name: macOS
            rust: nightly
            os: macos
          - name: Windows (gnu)
            rust: nightly-x86_64-pc-windows-gnu
            os: windows
          - name: Windows (msvc)
            rust: nightly-x86_64-pc-windows-msvc
            os: windows
            flags: /EHsc
    env:
      CARGO_TERM_COLOR: always
      CXXFLAGS: ${{matrix.flags}}
      RUSTFLAGS: --cfg deny_warnings -Dwarnings
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{matrix.rust}}
          components: rustfmt
      - name: Install creduce (ubuntu)
        # Windows and macOS jobs don't have creduce available, so
        # don't apt-get install creduce on them
        if: matrix.os == ''
        run: sudo apt-get install creduce
      - name: Set LIBCLANG_PATH (Windows)
        # Windows github action doesn't set the path for clang, so set it
        # See https://github.com/rust-lang/rust-bindgen/issues/1797
        if: matrix.os == 'windows'
        run: echo "LIBCLANG_PATH=$((gcm clang).source -replace "clang.exe")" >> $env:GITHUB_ENV
      - name: Exclude failing targets and tests
        run: |
          echo RUSTFLAGS=$RUSTFLAGS >> $GITHUB_ENV
        env:
          # no creduce on non-linux, so exclude tests needing creduce there
          # non-linux failures https://github.com/google/autocxx/issues/819
          # beta failing tests https://github.com/google/autocxx/issues/818
          RUSTFLAGS: ${{env.RUSTFLAGS}} ${{runner.os != 'Linux' && '--exclude autocxx-reduce --exclude autocxx-gen' || ''}} ${{runner.os != 'Linux' && '--cfg skip_non_linux_failing_tests' || ''}} ${{matrix.rust == 'beta' && '--cfg skip_beta_failing_tests' || ''}}
        id: testsuite
        shell: bash
      - run: cargo build --workspace ${{steps.testsuite.outputs.exclude}}
      - run: cargo test --workspace ${{steps.testsuite.outputs.exclude}}
      - name: Build s2 example
        working-directory: ./examples/s2
        # s2 doesn't link on Windows
        if: matrix.os != 'windows'
        run: cargo build --workspace
      - name: Build steam example
        working-directory: ./examples/steam-mini
        run: cargo build --workspace
      - name: Build subclass example
        working-directory: ./examples/subclass
        run: cargo build --workspace
      - name: Build pod example
        working-directory: ./examples/pod
        run: cargo build --workspace
      - name: Build chromium render-frame-host example
        working-directory: ./examples/chromium-fake-render-frame-host
        # chromium-fake-render-frame-host doesn't link on Windows
        if: matrix.os != 'windows'
        run: cargo build --workspace
      - name: Build non-trivial-type-on-stack example
        working-directory: ./examples/non-trivial-type-on-stack
        if: matrix.os != 'windows'
        run: cargo build --workspace

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    env:
      CARGO_TERM_COLOR: always
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v2
      - uses: dtolnay/rust-toolchain@clippy
      - run: cargo clippy --workspace --tests -- -Dclippy::all

  outdated:
    name: Outdated
    runs-on: ubuntu-latest
    env:
      CARGO_TERM_COLOR: always
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v2
      - uses: dtolnay/install@cargo-outdated
      - run: cargo outdated --exit-code 1
