name: CI

on:
  pull_request:
  push:
  schedule: [cron: "40 1 * * *"]
  workflow_dispatch:

jobs:
  test:
    name: ${{matrix.name || format('Rust {0}', matrix.rust)}}
    runs-on: ${{matrix.os || 'ubuntu'}}-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - rust: nightly
          - rust: beta
          - rust: stable
          - name: macOS
            rust: nightly
            os: macos
          - name: Windows (gnu)
            rust: nightly-x86_64-pc-windows-gnu
            os: windows
          - name: Windows (msvc)
            rust: nightly-x86_64-pc-windows-msvc
            os: windows
            flags: /EHsc
    env:
      CARGO_TERM_COLOR: always
      CXXFLAGS: ${{matrix.flags}}
      RUSTFLAGS: --cfg deny_warnings -Dwarnings
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{matrix.rust}}
      - name: Install creduce
        run: sudo apt-get install creduce
      - name: Determine test suite subset
        # Our Windows and macOS jobs are the longest running, so exclude the
        # relatively slow compiletest from them to speed up end-to-end CI time,
        # except during cron builds when no human is presumably waiting on the
        # build. The extra coverage is not particularly valuable and we can
        # still ensure the test is kept passing on the basis of the scheduled
        # builds.
        run: |
          echo RUSTFLAGS=$RUSTFLAGS >> $GITHUB_ENV
          echo ::set-output name=exclude::''}}
        env:
          RUSTFLAGS: ${{env.RUSTFLAGS}} ${{matrix.os && github.event_name == 'never' && '--cfg skip_ui_tests' || ''}}
        id: testsuite
        shell: bash
      - run: cargo test --workspace ${{steps.testsuite.outputs.exclude}}
      - name: Build s2 example
        working-directory: ./examples/s2
        run: cargo build --workspace
      - name: Build steam example
        working-directory: ./examples/steam-mini
        run: cargo build --workspace
      - name: Build subclass example
        working-directory: ./examples/subclass
        run: cargo build --workspace
      - name: Build pod example
        working-directory: ./examples/pod
        run: cargo build --workspace
      - name: Build chromium render-frame-host example
        working-directory: ./examples/chromium-fake-render-frame-host
        run: cargo build --workspace
      - name: Build non-trivial-type-on-stack example
        working-directory: ./examples/non-trivial-type-on-stack
        run: cargo build --workspace

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    env:
      CARGO_TERM_COLOR: always
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v2
      - uses: dtolnay/rust-toolchain@clippy
      - run: cargo clippy --workspace --tests -- -Dclippy::all

  outdated:
    name: Outdated
    runs-on: ubuntu-latest
    env:
      CARGO_TERM_COLOR: always
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v2
      - uses: dtolnay/install@cargo-outdated
      - run: cargo outdated --exit-code 1
